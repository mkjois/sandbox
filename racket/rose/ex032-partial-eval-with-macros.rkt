#lang racket

; This file: Arithmetic expressions and variables, now with macros for 
; lifting several racket operators at once

; This segment is a compiler from YL to formula ASTs

(define-syntax-rule (lift-ops op ...)
  (begin (lift-op op) ... ))
    
(define-syntax-rule (lift-op op)
  (begin 
    ; symbol op must come from the use of the macro (cf. 1.2.3.9 Macro-Introduced Bindings)
    ; symbol opn is freshly generated by the macro 
    (require (only-in racket (op opn)))
    (define (op x y)
      (if (and (number? x) (number? y)) ; are both args concrete?
          (opn x y)
          `(op ,x ,y)))))

; we now lift a few operators 

(lift-ops + - * / =)

; no change in how we declare variables:

(define-syntax-rule (define-YL-var v ...)
  (begin 
    (define v 'v) ...
    '(declare v) ...
    ))


; This is a sample YL program. 

(define-YL-var x)
(+ 1 2)
(+ x (+ 1 2))
(+ 1 (+ x 2))
