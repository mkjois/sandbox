#lang racket

; problems illustrated:
;   sub1 expects number, not a symbolic value
;   fib will unroll forever

; This is the compiler 

(require (only-in racket (+ racket/+)(- racket/-)(* racket/*)))

(define (+ x y)
  (if (and (number? x) (number? y))
      (racket/+ x y)
      `(+ ,x ,y)))

(define (- x y)
  (if (and (number? x) (number? y))
      (racket/- x y)
      `(- ,x ,y)))

(define (* x y)
  (if (and (number? x) (number? y))
      (racket/* x y)
      `(* ,x ,y)))

(define-syntax-rule (define-YL-var v ...)
  (begin 
    (define v 'v) ...
    '(declare v) ...
    ))

; This is a YL program

(define (fib x) 
  (case x 
    [(0 1) 1] 
    [else (+ (fib (sub1 x)) (fib (- x 2)))]
;     [else (+ (fib (- x 1)) (fib (- x 2)))]
  ))
  
(define-YL-var x)

; fully evaluated
(+ 1 (fib 6))

; show that we don't need to be always symbolic
(+ x (fib 5))

; this does not terminate
; (fib x)

; Polynomials

(define-YL-var a b c n)

(define (polynomial n x coefs)
  (if (= n 0)
      (car coefs)
      (+ (car coefs) (* x (polynomial (sub1 n) x (cdr coefs))))))

(polynomial 2 2 (list 1 2 3))
(polynomial 2 x (list 1 2 3))
(polynomial 2 x (list a b c))
(polynomial n x (list a b c))