#lang racket

(require rosette/lang/control)
         
(require rosette/config/config rosette/config/log 
         rosette/base/value rosette/base/bool rosette/base/num
         (rename-in rosette/base/phi [phi ite])
         rosette/solver/solution rosette/kodkod/kodkod
         (only-in rosette/lang/define define-symbolic))

(current-log-handler 
 (log-handler #:name 'sym-demo-handler   ; handler name (optional)
              #:info any/c))             ; handle any message with priorty level 'info or higher

; This file: recursive functions, finized via bounded unrolling
; -------------------------------------------------------------

; This segment is a compiler from YL to formula ASTs

; declarations of variables

(define-syntax-rule (define-YL-var v ...)
  (begin 
    (define v 'v) ...
    '(declare v) ...
    ))
  
; symbolic value

(struct symbolic (v) #:transparent)
  
; we now lift operators to operate on symbolic expressions

(define-syntax-rule (lift-ops op ...)
  (begin (lift-op op) ... ))
    
(define-syntax-rule (lift-op op)
  (begin 
    ; symbol op must come from the use of the macro (cf. 1.2.3.9 Macro-Introduced Bindings)
    ; symbol opn is freshly generated by the macro 
    (require (only-in racket (op opn)))
    (define (op x y)
      (if (and (number? x) (number? y)) ; are both args concrete?
          (opn x y)
          (symbolic `(op ,x ,y))))))

; we now lift a few operators 

(lift-ops + - * / = <= >=)

; lift if does not fit the above pattern, so we define it separately

(require (only-in racket (if racket/if)))

(define-syntax-rule (if e t f) 
   (racket/if (boolean? e)     
           (racket/if e t f)   
           (symbolic `(ite ,e ,t ,f))))

; finitize a function definition 

; TODO: can we make the rewritten function first-class?

(define-syntax-rule (define-fin-fun (fun arg ...) def ... body)
  ; modify the definition of function fun by adding the limit argument
  (begin 
    ; rewrite "outside" calls to fun
    (define-syntax-rule (fun actual (... ...))
      (renamed-fun actual (... ...) 2))

    ; redefine fun into renamed-fun, adding the call-depth limit argument
    (define (renamed-fun arg ... limit) 
      def ...
      (begin 
        ; rewrite (recursive) calls to fun inside the body of fun
        (define-syntax-rule (fun actual (... ...))
          (renamed-fun actual (... ...) (sub1 limit)))
        ; rewrite the body of fun: terminate unwinding if any 
        ; argument is symbolic and we have exhasted the depth limit
        (racket/if (and (or (symbolic? arg) ...) (<= limit 0))
                   'error-unroll-me-more
                   body)))
    ))


;;;; These are sample YL programs

(define-YL-var n x a b c d)

; sum

(define-fin-fun (sum n) 
  (if (= n 0) 0
      (+ n (sum (- n 1)))))
                      
(sum 3)
(sum n)

; fibonacci 

(define-fin-fun (fib n)
  (if (= n 0) 1
      (if (= n 1) 1
          (+ (fib (- n 1)) (fib (- n 2))))))

(fib 6)
(fib n)

; double-mutually recursive fib

(define-fin-fun (fib-mut n)
  (define-fin-fun (aux-out n) 
    (define-fin-fun (aux-in n) 
      (fib-mut n))
    (aux-in n))
  (if (= n 0) 1
      (if (= n 1) 1
          (+ (aux-out (- n 1)) (aux-out (- n 2))))))

(fib-mut 6)
(fib-mut n)

; polynomials 

(define-fin-fun (poly n x coefs)
  (if (= n 0)
      (car coefs)
      (+ (car coefs) (* x (poly (- n 1) x (cdr coefs))))))

(poly 2 2 (list 1 2 3))
(poly 2 x (list 1 2 3))
(poly 2 x (list a b c))
(poly n x (list a b c d))

; our functions are first class

(foldl + d (list a b c))
(foldr + d (list a b c))

(define (IF e t f) (if e t f))
(foldl IF a (list c a b) (list b c a))

; You can't do this, we are first-order only.  Functions can't be unknowns.
; (foldr a d (list a b c)) 



;(require macro-debugger/stepper)
;(syntax->datum (expand/step #'

