#lang racket

(define-syntax-rule (lift-ops op ...)
  (begin (lift-op op) ... ))
    
(define-syntax-rule (lift-op op)
  (begin 
    ; symbol op must come from the use of the macro (cf. 1.2.3.9 Macro-Introduced Bindings)
    ; symbol opn is freshly generated by the macro 
    (require (only-in racket (op opn)))
    (define (op x y)
      (if (and (number? x) (number? y)) ; are both args concrete?
          (opn x y)
          `(op ,x ,y)))))

(lift-ops + - * / =)

(+ 1 2)
(- 2 1)
(- 'x 2)

;(syntax->datum (expand #'(require (only-in racket (+ racket/+)))))